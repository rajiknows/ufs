syntax = "proto3";

package storage;

message PeerMessage {
  bytes node_id = 1;
  string address = 2;
}

// The main service running on each peer.
service PeerService {
  // Kademlia RPCs
  rpc Ping(PingRequest) returns (PongResponse);
  rpc Store(StoreRequest) returns (StoreResponse);
  rpc FindNode(FindNodeRequest) returns (FindNodeResponse);
  rpc FindValue(FindValueRequest) returns (FindValueResponse);


  // Asks a peer for a specific chunk of a file.
  rpc GetChunk(GetChunkRequest) returns (GetChunkResponse);

  // Asks a peer for the metadata of a specific file.
  rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse);

  

  // Asks a peer for a list of its known peers.
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse);

  // Asks a peer for a list of its known files.
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);

  // Initiates a file upload.
  rpc InitiateUpload(InitiateUploadRequest) returns (InitiateUploadResponse);

  // Uploads a chunk of a file.
  rpc UploadChunk(UploadChunkRequest) returns (UploadChunkResponse);
}

// Kademlia RPC Messages
message PingRequest {
  PeerMessage peer = 1;
}

message PongResponse {
  bytes node_id = 1;
}

message StoreRequest {
  bytes key = 1;
  string value = 2; // Can be a serialized struct or any string data
}

message StoreResponse {
  bool success = 1;
}

message FindNodeRequest {
  bytes target_id = 1;
}

message FindNodeResponse {
  repeated PeerMessage peers = 1;
}

message FindValueRequest {
  bytes key = 1;
}

message FindValueResponse {
  oneof result {
    string value = 1;
    FindNodeResponse closest_peers = 2;
  }
}


message GetChunkRequest { bytes chunk_hash = 1; }

message GetChunkResponse { bytes chunk_data = 1; }

message GetFileMetadataRequest { bytes file_hash = 1; }

message GetFileMetadataResponse {
  // Will contain the serialized FileInfo struct.
  bytes metadata = 1;
}

message StoreChunkRequest {
  bytes chunk_hash = 1;
  bytes chunk_data = 2;
}

message StoreChunkResponse { bool success = 1; }

message InitiateUploadRequest {
  bytes file_hash = 1;
  FileInfo metadata = 2;
}

message InitiateUploadResponse {
  bool success = 1;
}

message UploadChunkRequest {
  bytes chunk_hash = 1;
  bytes chunk_data = 2;
}

message UploadChunkResponse {
  bool success = 1;
}



message ListPeersRequest {}

message ListPeersResponse {
  repeated string peers = 1;
}


message FileInfo {
  string name = 1;
  uint64 size = 2;
  repeated bytes chunk_hashes = 3;
}

message ListFilesRequest {}

message ListFilesResponse {
  repeated FileInfo files = 1;
}
