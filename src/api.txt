use std::{error::Error, sync::Arc};

use axum::{extract::State, routing::get, Json, Router};
use serde::Deserialize;
use serde_json::json;

use crate::network::NetworkNode;

pub struct ApiState {
    node: NetworkNode,
}

// API handlers as standalone functions
async fn get_status() -> Json<serde_json::Value> {
    Json(json!({
        "status": "running",
        "uptime": "24 hours"
    }))
}

async fn list_files(State(state): State<Arc<ApiState>>) -> Json<serde_json::Value> {
    // Access state.node here for actual implementation
    println!("listing files");
    let node = state.node.clone();
    let files = node.list_files().await;
    Json(json!(files))
}

async fn list_peers(State(state): State<Arc<ApiState>>) -> Json<serde_json::Value> {
    // Access state.node here for actual implementation
    let node = state.node.clone();
    let peers = node.get_peers().await;
    Json(json!(peers))
}

#[derive(Deserialize)]
struct FilePath {
    filepath: String,
}

async fn upload_file(
    State(state): State<Arc<ApiState>>,
    Json(payload): Json<FilePath>,
) -> Result<Json<serde_json::Value>, Box<dyn Error>> {
    let node = state.node.clone();

    let path = payload.filepath;
    if !std::path::Path::new(&path).exists() {
        return Ok(Json(json!({ "error": "File does not exist" })));
    }

    let data = tokio::fs::read(&path).await?;
    let filename = std::path::Path::new(&path)
        .file_name()
        .and_then(|n| n.to_str())
        .ok_or("Invalid filename")?;

    let fs = node.get_filesystem().await;
    let file_hash = fs.lock().await.add_file(filename, &data).await;

    node.broadcast_new_file(file_hash.clone()).await?;

    Ok(Json(json!({
        "status": "success",
        "filename": filename,
        "size": data.len(),
        "hash": hex::encode(file_hash),
    })))
}

// Create routes with state
pub fn create_routes(node: NetworkNode) -> Router {
    let state = Arc::new(ApiState { node });

    Router::new()
        .route("/status", get(get_status))
        .route("/files", get(list_files))
        .route("/peers", get(list_peers))
        .with_state(state)
}
